---
kind: pipeline
type: kubernetes
name: jparest

platform:
  os: linux
  arch: amd64

trigger:
  event:
    include:
    - push
    - pull_request

steps:
  - name: publish
    image: maven:3.8-openjdk-17
    environment:
      ARTIFACTORY_TOKEN:
        from_secret: artifactory_token
    commands:
    - mvn clean install
    - mvn -s ./jparest_settings.xml -f pom.xml install -B org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy -DuniqueVersion=false -DaltReleaseDeploymentRepository=artifactory::default::https://artifactory.digital.homeoffice.gov.uk/artifactory/callisto-jparest -DskipTests
    when:
      event:
        exclude:
          - pull_request

- name: sonar
  image: maven:3.8-openjdk-17
  depends_on:
  - publish
  environment:
    SONAR_HOST:
      from_secret: sonar_host
    SONAR_TOKEN:
      from_secret: sonar_token
  commands:
  - "BRANCH=$(echo $DRONE_BRANCH | tr '[:lower:]' '[:upper:]') && [[ $BRANCH =~ (EAHW-[0-9]*) ]] && projectSuffix=$${match/#E/-E}$${BASH_REMATCH/#E/-E}"
  - mvn sonar:sonar -Dsonar.host.url=$${SONAR_HOST} -Dsonar.login=$${SONAR_TOKEN} -DprojectKeySuffix=$${projectSuffix}
  when:
    event:
      exclude:
      - pull_request

# - name: sonar pr decoration
#   image: maven:3.8-openjdk-17
#   depends_on:
#   - sonar
#   environment:
#     SONAR_HOST:
#       from_secret: sonar_host
#     SONAR_TOKEN:
#       from_secret: sonar_token
#   commands:
#   - echo this is where I run the pull request decoration
#   when:
#     event:
#       include:
#       - pull_request

---
kind: pipeline
type: kubernetes
name: sonar housekeeping

trigger:
  event:
  - cron
  cron:
    include:
    - nightly

steps:
- name: SonarQube housekeeping
  image: quay.io/ukhomeofficedigital/cicd-actions-sonarqube-housekeeping:v1
  settings:
    sonarqube_host: https://sonarqube.digital.homeoffice.gov.uk/
    sonarqube_token:
      from_secret: sonar_token
    sonarqube_project_prefix: 'callisto-jparest'
    jira_project_key: 'eahw'

---
kind: pipeline
type: kubernetes
name: build notifications

trigger:
  status:
    - success
    - failure
  event:
    - push

depends_on:
  - jparest

steps:
  - name: slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: SLACK_WEBHOOK_URL
      channel: callisto-tech-notifications
      username: Drone
      template: |
        {{#success build.status}}
          Build #{{ build.number }} succeeded! :tada:
        {{else}}
          Build #{{ build.number }} failed :alert:
        {{/success}}
        Commit: <${DRONE_REPO_LINK}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}> - {{{ trim build.message }}}
        Repo: {{ repo.name }}
        Branch: <${DRONE_REPO_LINK}/commits/{{ build.branch }}|{{ build.branch }}>
        Author: {{ build.author }}
